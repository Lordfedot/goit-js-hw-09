{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,UAEa,CACXC,WAAYC,SAASC,cAAc,WAEhCF,WAAWG,iBAAiB,UAqBjC,SAAsBC,GACpBA,EAAEC,iBACFC,EAAQC,OAAOH,EAAEI,cAAcC,SAAS,GAAGC,OAC3CC,EAAOJ,OAAOH,EAAEI,cAAcC,SAAS,GAAGC,OAC1CE,EAASL,OAAOH,EAAEI,cAAcC,SAAS,GAAGC,OAG5CG,EAFAC,EAAW,EAEWR,GAiBhBS,EAAaC,aAAY,YAC7BF,GAAY,GACGF,EACbK,cAAcF,GAIhBF,EAAYC,EADZR,GAAgBK,E,GAEhBA,GATJ,IACQI,C,IA3CR,IAAIT,EAAQ,EACRK,EAAO,EACPC,EAAS,EACTE,EAAW,EA4Bf,SAASD,EAAYK,EAAUC,GA1B/B,IAAuBC,EAAUC,GAAVD,EA2BPF,EA3BiBG,EA2BPF,EA1BjB,IAAIG,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEK,SAAAR,EAAUS,MAAAR,IAGpBG,EAAO,CAAEI,SAAAR,EAAUS,MAAAR,G,GAErBA,E,KAkBHS,MAAK,SAAAC,G,IAAGC,EAAQD,EAARH,SAAUK,EAAKF,EAALF,MACjBK,EAAApC,GAASqC,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAEvEK,OAAM,SAAAP,G,IAAGC,EAAQD,EAARH,SAAUK,EAAKF,EAALF,MAClBK,EAAApC,GAASqC,OAAOI,QAAQ,sBAAqCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst refs = {\n  submitForm: document.querySelector('.form'),\n}\nrefs.submitForm.addEventListener('submit', onFormsubmit)\n\nlet delay = 0\nlet step = 0\nlet amount = 0\nlet position = 1\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(()=>{\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay })\n      }\n      else{\n        reject({ position, delay })\n      }\n    },delay) \n  });\n}\n\nfunction onFormsubmit(e) {\n  e.preventDefault()\n  delay = Number(e.currentTarget.elements[0].value)\n  step = Number(e.currentTarget.elements[1].value)\n  amount = Number(e.currentTarget.elements[2].value)\n  position = 1\n\n  makePromise(position, delay)\n  makeInterval()\n\n}\n\nfunction makePromise(position, delay) {\n  createPromise(position, delay)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  })\n}\n\n\nfunction makeInterval() {\n  const intervalId = setInterval(()=>{\n    position += 1\n    if (position > amount) {\n      clearInterval(intervalId)\n      return\n    }\n    delay = delay + step\n    makePromise(position, delay)\n  },step)\n  return intervalId\n}"],"names":["$iU1Pc","parcelRequire","submitForm","document","querySelector","addEventListener","e","preventDefault","$ce04d3a99e08e73b$var$delay","Number","currentTarget","elements","value","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$makePromise","$ce04d3a99e08e73b$var$position","intervalId","setInterval","clearInterval","position2","delay2","position1","delay1","Promise","resolve","reject","setTimeout","Math","random","position","delay","then","param","_$position","_$delay","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.97b17a0b.js.map"}